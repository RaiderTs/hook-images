{"version":3,"sources":["components/ErrorImage/ErrorImage.module.css","components/Modal/Modal.module.css","components/ImageGalleryItem/ImageGalleryItem.module.css","components/Loader/Loader.module.css","components/ImageGallery/ImageGallery.module.css","components/Button/Button.module.css","components/Searchbar/Searchbar.jsx","services/apiService.js","img/—Pngtree—red gradient ring fork symbol_4609561.png","components/ErrorImage/ErrorImage.jsx","components/Loader/Loader.jsx","components/Modal/Modal.jsx","components/ImageGalleryItem/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Button/Button.jsx","components/ImagesInfo/ImagesInfo.jsx","App.js","reportWebVitals.js","index.js","components/Searchbar/Searchbar.module.css"],"names":["module","exports","Searchbar","onSubmit","useState","imageName","setImageName","handleSubmit","event","preventDefault","trim","toast","error","className","style","header","form","e","type","btn","label","input","value","autoComplete","autoFocus","placeholder","onChange","currentTarget","toLowerCase","BASE_URL","API_KEY","api","fetchImages","name","page","fetch","then","response","ok","json","Promise","reject","Error","ErrorImage","message","role","errorWrapper","src","errorImage","width","alt","text","LoaderSpinner","overlay","color","height","timeout","modalRoot","document","querySelector","Modal","onClose","isFirstRender","useRef","useEffect","current","window","addEventListener","handleKeyDown","removeEventListener","code","console","log","createPortal","backdrop","onClick","target","modal","ImageGalleryItem","largeImageUrl","showModal","setShowModal","toggleModal","item","image","ImageGallery","images","list","map","index","webformatURL","tags","largeImageURL","Btn","ImagesInfo","setImages","setPage","setError","isLoading","setIsLoading","scroll","scrollTo","top","documentElement","scrollHeight","behavior","apiService","newImages","total","prevImages","hits","catch","finally","textError","Loader","length","Button","App","autoClose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fdbf9f03.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ErrorWrapper\":\"ErrorImage_ErrorWrapper__1CVoR\",\"text\":\"ErrorImage_text__3iQ6R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__1aR0r\",\"modal\":\"Modal_modal__22_pS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ImageGalleryItem_item__3vTLY\",\"image\":\"ImageGalleryItem_image__OYrUd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"Loader_overlay__3Weoo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ImageGallery_list__3naQp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3dcvC\"};","// import { ImSearch } from 'react-icons/im';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport PropTypes from 'prop-types';\nimport style from './Searchbar.module.css';\n\nfunction Searchbar({ onSubmit }) {\n  const [imageName, setImageName] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (imageName.trim() === '') {\n      toast.error('Enter a value to search');\n      return;\n    }\n\n    onSubmit(imageName);\n    setImageName('');\n  };\n\n  return (\n    <header className={style.header}>\n      <form className={style.form} onSubmit={e => handleSubmit(e)}>\n        <button type=\"submit\" className={style.btn}>\n          <span className={style.label}>Search</span>\n          {/* <ImSearch  /> */}\n        </button>\n\n        <input\n          className={style.input}\n          type=\"text\"\n          value={imageName}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images\"\n          onChange={event =>\n            setImageName(event.currentTarget.value.toLowerCase())\n          }\n        />\n      </form>\n    </header>\n  );\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","const BASE_URL = 'https://pixabay.com/api';\nconst API_KEY = '11349157-fc9c2ea73d90d296f310c891d';\n\nfunction fetchImages(name = '', page = 1) {\n  return fetch(\n    `${BASE_URL}/?q=${name}&page=${page}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`,\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`No picture with name ${name}`));\n  });\n}\n\nconst api = { fetchImages };\n\nexport default api;\n","export default __webpack_public_path__ + \"static/media/—Pngtree—red gradient ring fork symbol_4609561.1589bf7d.png\";","import PropTypes from 'prop-types';\nimport errorImage from '../../img/—Pngtree—red gradient ring fork symbol_4609561.png';\nimport style from './ErrorImage.module.css';\n\nfunction ErrorImage({ message }) {\n  return (\n    <div role=\"alert\" className={style.errorWrapper}>\n      <img src={errorImage} width=\"550\" alt=\"sadcat\" />\n      <p text={message} className={style.text}>\n        {message}\n      </p>\n    </div>\n  );\n}\n\nErrorImage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default ErrorImage;\n","import Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport style from './Loader.module.css';\n\nfunction LoaderSpinner() {\n  return (\n    <div className={style.overlay}>\n      <Loader\n        type=\"ThreeDots\"\n        color=\"#00BFFF\"\n        height={100}\n        width={100}\n        timeout={3000} //3 secs\n      />\n    </div>\n  );\n}\n\n\nexport default LoaderSpinner;","import { useRef, useEffect } from 'react';\nimport { createPortal } from 'react-dom'; // Для рендера портала\nimport style from './Modal.module.css';\nimport PropTypes from 'prop-types';\n\nconst modalRoot = document.querySelector('#modal-root'); \n\nfunction Modal({ onClose, src, alt }) {\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    if (isFirstRender.current) {\n      window.addEventListener('keydown', handleKeyDown);\n      isFirstRender.current = false;\n      return;\n    }\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n\n  const handleKeyDown = e => {\n\n    if (e.code === 'Escape') {\n      console.log('Нажали ESC, нужно закрыть модалку');\n\n      onClose(); \n    }\n  };\n\n  const handleBackdropClick = event => {\n\n    if (event.currentTarget === event.target) {\n\n      onClose(); \n    }\n  };\n\n  return createPortal(\n    <div className={style.backdrop} onClick={handleBackdropClick}>\n      <div className={style.modal}>\n        <img src={src} alt={alt} />\n      </div>\n    </div>,\n    modalRoot,\n  );\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n};\n\nexport default Modal;\n","// import React, { Component } from 'react';\nimport { useState } from 'react'\nimport PropTypes from 'prop-types';\nimport Modal from '../Modal';\nimport style from './ImageGalleryItem.module.css';\n\nfunction ImageGalleryItem({ src, alt, largeImageUrl }) {\n  const [showModal, setShowModal] = useState(false);\n\n\n  const toggleModal = () => {\n\n    setShowModal(!showModal);\n  };\n\n  return (\n    <li className={style.item}>\n      <img\n        onClick={toggleModal}\n        src={src}\n        alt={alt}\n        className={style.image}\n      />\n      {showModal && (\n        <Modal onClose={toggleModal} src={largeImageUrl} alt={alt} />\n      )}\n    </li>\n  );\n}\nImageGalleryItem.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  largeImageUrl: PropTypes.string.isRequired,\n};\n\nexport default ImageGalleryItem;\n","import PropTypes from 'prop-types';\nimport ImageGalleryItem from '../ImageGalleryItem';\nimport style from './ImageGallery.module.css';\n\nfunction ImageGallery({ images }) {\n  return (\n    <ul className={style.list}>\n      {images.map((image, index) => (\n        <ImageGalleryItem\n          key={index}\n          src={image.webformatURL}\n          alt={image.tags}\n          largeImageUrl={image.largeImageURL}\n        />\n      ))}\n    </ul>\n  );\n}\n\nImageGallery.propTypes = {\n  images: PropTypes.array.isRequired,\n};\n\nexport default ImageGallery;\n","import PropTypes from 'prop-types';\nimport style from './Button.module.css';\n\nfunction Btn({ onClick }) {\n  return (\n    <button type=\"button\" className={style.btn} onClick={() => onClick()}>\n      Load more\n    </button>\n  );\n}\n\nBtn.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Btn;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport apiService from '../../services';\nimport ErrorImage from '../ErrorImage';\nimport Loader from '../Loader';\nimport ImageGallery from '../ImageGallery';\nimport Button from '../Button';\n\n// const Status = {\n//   IDLE: 'idle',\n//   PENDING: 'pending',\n//   RESOLVED: 'resolved',\n//   REJECTED: 'rejected',\n// };\n\nfunction ImagesInfo({ imageName, images, page, setImages, setPage }) {\n  const [error, setError] = useState(null);\n  // const [status, setStatus] = useState(Status.IDLE);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (imageName === '') {\n      console.log('Ничего не введено');\n      return;\n    } else if (imageName) {\n      fetchImages();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [imageName]);\n\n  useEffect(() => {\n    scroll();\n  });\n\n  const scroll = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: 'smooth',\n    });\n  };\n\n  const fetchImages = () => {\n    // setStatus(Status.PENDING);\n    setIsLoading(isLoading => !isLoading);\n\n    apiService\n      .fetchImages(imageName, page)\n      .then(newImages => {\n        if (newImages.total !== 0) {\n          setImages(prevImages => [...prevImages, ...newImages.hits]);\n          setPage(page => page + 1);\n          // setStatus(Status.RESOLVED);\n        } else return Promise.reject(new Error('Invalid request'));\n      })\n      .catch(error => {\n        setError(error);\n        // setStatus(Status.REJECTED);\n      })\n      .finally(() => setIsLoading(isLoading => !isLoading));\n  };\n\n  // if (status === Status.IDLE) {\n  //   return <p>Please enter your request</p>;\n  // }\n\n  // if (status === Status.PENDING) {\n  //   return <Loader isLoading={isLoading} />;\n  // }\n\n  // if (status === Status.REJECTED) {\n  //   return <ErrorImage message={error.message} />;\n  // }\n\n  // if (status === Status.RESOLVED) {\n  return (\n    <>\n      {error && <ErrorImage textError={error} />}\n      <ImageGallery images={images} />\n      <Loader isLoading={isLoading} />\n      {/* page={this.state.page} */}\n      {/* <Button onClick={fetchImages} /> */}\n      {images.length > 0 && !isLoading && !error && (\n        <Button onClick={fetchImages} />\n      )}\n    </>\n  );\n}\n// }\n\nImagesInfo.propTypes = {\n  imageName: PropTypes.string.isRequired,\n  images: PropTypes.array.isRequired,\n  page: PropTypes.number.isRequired,\n  setImages: PropTypes.func.isRequired,\n  setPage: PropTypes.func.isRequired,\n};\n\nexport default ImagesInfo;\n\n// // import { Component } from 'react';\n// import { useState, useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import apiService from '../../services';\n// import ErrorImage from '../ErrorImage';\n// import Loader from '../Loader';\n// import ImageGallery from '../ImageGallery';\n// import Button from '../Button';\n\n// const Status = {\n//   IDLE: 'idle',\n//   PENDING: 'pending',\n//   RESOLVED: 'resolved',\n//   REJECTED: 'rejected',\n// };\n\n// function ImagesInfo({ imageName, prevName }) {\n//   const [images, setImages] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [status, setStatus] = useState(Status.IDLE);\n//   const [page, setPage] = useState(1);\n\n//   useEffect(() => {\n//     if (imageName !== prevName) {\n//       setPage(1);\n//     }\n//   }, [imageName, prevName]);\n\n//   useEffect(() => {\n//     if (imageName === '') {\n//       return;\n//     }\n\n//     setStatus(Status.PENDING);\n\n//     apiService\n//       .fetchImages(imageName, page)\n//       .then(newImages => {\n//         if (newImages.total !== 0) {\n//           setImages(\n//             prevImages => [...prevImages, ...newImages.hits],\n//             setStatus(Status.RESOLVED),\n//           );\n//           return;\n//         }\n//         return Promise.reject(new Error('Invalid request'));\n//       })\n\n//       .catch(error => {\n//         setError(error);\n//         setStatus(Status.REJECTED);\n//       })\n//       .finally(() => {\n//         window.scrollTo({\n//           top: document.documentElement.scrollHeight - 970,\n//           behavior: 'smooth',\n//         });\n//       });\n//   }, [imageName, page]);\n\n//   const onLoadMore = () => {\n\n//     setPage(page + 1);\n\n//   };\n\n//   if (status === Status.IDLE) {\n//     return <p>Please enter your request</p>;\n//   }\n\n//   if (status === Status.PENDING) {\n//     return <Loader />;\n//   }\n\n//   if (status === Status.REJECTED) {\n//     return <ErrorImage message={error.message} />;\n//   }\n\n//   if (status === Status.RESOLVED) {\n//     return (\n//       <>\n//         <ImageGallery images={images} />\n//         {/* page={this.state.page} */}\n//         <Button onLoadMore={onLoadMore} />\n//       </>\n//     );\n//   }\n// }\n\n// ImagesInfo.propTypes = {\n//   imageName: PropTypes.string.isRequired,\n// };\n\n// export default ImagesInfo;\n","// import React, { Component } from 'react';\n\nimport { useState } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Searchbar from './components/Searchbar';\nimport ImagesInfo from './components/ImagesInfo';\n\nfunction App() {\n  const [imageName, setImageName] = useState('');\n  const [images, setImages] = useState([]);\n  const [page, setPage] = useState(1);\n\n  const handleFormSubmit = name => {\n    setImageName(name);\n    setImages([]);\n    setPage(1);\n  };\n\n  return (\n    <>\n      <Searchbar onSubmit={handleFormSubmit} />\n      <ImagesInfo\n        imageName={imageName}\n        images={images}\n        page={page}\n        setImages={setImages}\n        setPage={setPage}\n      />\n      <ToastContainer autoClose={3000} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Searchbar_header__kc2A-\",\"form\":\"Searchbar_form__3ZX15\",\"btn\":\"Searchbar_btn__30NVj\",\"label\":\"Searchbar_label__2UDbq\",\"input\":\"Searchbar_input__2W4RS\"};"],"sourceRoot":""}